require_relative '../spec_helper'

module ArtDecomp
  describe Decomposer do
    let(:archs) { Set[Arch[5,1]] }
    let(:fsm)   { FSM.from_kiss 'spec/fixtures/fsm' }
    let(:g1)    { Blanket.new [] }
    let(:g2)    { Blanket.new [] }
    let(:qu)    { Blanket.new [] }
    let(:qv1)   { Blanket.new [] }
    let(:qv2)   { Blanket.new [] }
    let(:u)     { Set[0] }
    let(:v)     { Set[1] }
    let(:gens) do
      {
        uv: [MiniTest::Mock.new.expect(:uv_pairs, [[fsm, u, v]], [fsm, archs]).expect(:uv_pairs, [[fsm, u, v]], [fsm, archs])],
        qu: [MiniTest::Mock.new.expect(:blankets, [qu], [fsm, u, v]).expect(:blankets, [qu], [fsm, u, v])],
        qv: [MiniTest::Mock.new.expect(:blankets, [[qv1, g1], [qv2, g2]], [fsm, u, v, qu]).expect(:blankets, [[qv1, g1], [qv2, g2]], [fsm, u, v, qu])],
      }
    end
    let(:decomposer) { Decomposer.new archs: archs, fsm: fsm, gens: gens }

    describe '#decompositions' do
      it 'yields the Decompositions generated by the generators' do
        decomposer.decompositions.must_include Decomposition.new fsm, u, v, qu, qv1, g1
        decomposer.decompositions.must_include Decomposition.new fsm, u, v, qu, qv2, g2
        gens.values.each { |gs| gs.map(&:verify) }
      end

      it 'yields only sensible Decompositions' do
        pos_dec = Object.new
        neg_dec = Object.new

        def pos_dec.sensible?(_)
          true
        end

        def neg_dec.sensible?(_)
          false
        end

        dec_class = MiniTest::Mock.new
        dec_class.expect :new, pos_dec, [fsm, u, v, qu, qv1, g1]
        dec_class.expect :new, neg_dec, [fsm, u, v, qu, qv2, g2]
        decs = decomposer.decompositions(decomposition_class: dec_class).to_a
        decs.must_include pos_dec
        decs.wont_include neg_dec
        dec_class.verify
      end
    end
  end
end
