require_relative '../spec_helper'

module ArtDecomp describe Decomposer do
  let(:archs) { Set[Arch[5,1]] }
  let(:fsm)   { FSM.from_kiss 'spec/fixtures/fsm' }
  let(:g)     { Blanket.new [] }
  let(:qu)    { Blanket.new [] }
  let(:qv)    { Blanket.new [] }
  let(:u)     { Set[0] }
  let(:v)     { Set[1] }
  let(:gens)  { {
    uv: [MiniTest::Mock.new.expect(:uv_pairs, [[fsm, u, v]], [fsm, archs])   .expect(:uv_pairs, [[fsm, u, v]], [fsm, archs])],
    qu: [MiniTest::Mock.new.expect(:blankets, [qu],          [fsm, u, v])    .expect(:blankets, [qu],          [fsm, u, v])],
    qv: [MiniTest::Mock.new.expect(:blankets, [[qv, g]],     [fsm, u, v, qu]).expect(:blankets, [[qv, g]],     [fsm, u, v, qu])],
  } }
  let(:decomposer) { Decomposer.new archs: archs, fsm: fsm, gens: gens }

  describe '#decompositions' do
    it 'yields the Decompositions generated by the generators' do
      decomposer.decompositions.must_include Decomposition.new fsm, u, v, qu, qv, g
      gens.values.each { |gs| gs.map(&:verify) }
    end

    it 'yields only the sensible Decompositions' do
      pos_dec = Object.new; def pos_dec.sensible? _; true;  end
      neg_dec = Object.new; def neg_dec.sensible? _; false; end
      dec_gen = MiniTest::Mock.new
      dec_gen.expect :new, pos_dec, [fsm, u, v, qu, qv, g]
      dec_gen.expect :new, neg_dec, [fsm, u, v, qu, qv, g]
      decs = decomposer.decompositions decomposition_generator: dec_gen
      decs.must_include pos_dec
      decs.wont_include neg_dec
      dec_gen.verify
    end
  end
end end
